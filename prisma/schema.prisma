// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  tasks     Task[]
  comments  Comment[]

}

model Project {
  projectId   Int       @id @default(autoincrement())
  projectName String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [userId])
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  taskId      Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  priority    Priority
  status      Status
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [projectId])
  userId      Int
  user        User      @relation(fields: [userId], references: [userId])
  taskLabels TaskLabel[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Label {
  labelId    Int         @id @default(autoincrement())
  labelName  String      @unique
  taskLabels TaskLabel[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model TaskLabel {
  taskLabelId Int      @id @default(autoincrement())
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [taskId])
  labelId     Int
  label       Label    @relation(fields: [labelId], references: [labelId])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([taskId, labelId])
}

model Comment {
  commentId Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [taskId])
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  Low
  Medium
  High
}

enum Status {
  ToDo
  InProgress
  Done
}